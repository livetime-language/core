// EXAMPLE CODE: This is an example of the LiveTime programming language.
enum Phase: DrawItems, Reveal, GameOver

app
	int round
	// List of words
	const string[] words = ["", "Word"]
	Phase phase
	Player currentPlayer
	Box[] boxes
	Item[] items
	
	int[] getNumbers: int start, int end
		int[] list
		// For loop for numbers syntax: for <start> to <end>
		// Use . to access the current value
		for start to end
			if . % 2 == 0: list.add .
		return list
		
	int getSum: int[] list
		int sum
		// For loop for lists syntax: for <list>
		// Use . to access the current value
		for list
			sum += .
		return sum
		
	getWinner
		return players.withMax.score
		
	start
		Menu()
		startGame
		
	startGame
		for Direction.diagonalDirections
			boxes.add {rect:{position:{220,280}*.vector, size:{420,440}}}
		nextRound

		// When assigning an enum value to a variable, the enum name must be omitted
		// Write "phase = DrawItems" instead of "phase = Phase.DrawItems"
		phase = DragItems
		
	nextRound
		round++
		boxes.each.itemInBox = null
		words.shuffle
		items.clear

		// Create item for each word, center them at {0,10} with {400,0} pixels between them
		forPositions words, center:{0,10}, delta:{400,0}
			items.add {position:pos, word:.}
			
		// Make the next player the current player
		currentPlayer = players next currentPlayer
			
	tick
		items.each.tick
		boxes.each.tick
		players.each.tick
		
		// If all items are dropped into boxes, show "Next Round button"
		if phase == DragItems and items.all.droppedInBox != null
			drawButton image:Button, text:"Next Round", position:{0,0}, visibleFor:currentPlayer
				let playerWhoClickedTheButton = touch.by
				phase = Reveal
				nextRound
				
	gameOver
		phase = GameOver

		// Order players by score
		players.orderBy.score order:Descending
		
		// Print name and score of first 2 players
		for 2
			let player = players[.]
			print "{player.name}: {player.score}"
			
		// Iterate players in reverse order and print player names
		for players <-
			print .name
		
		// Get players with even index and a score more than 3
		Player[] evenPlayers = players.where.index % 2 == 0 and .score > 3
		
		let totalScoreOfAlivePlayer = players.where(.alive).total.score
		
		// Find player with highest score from all alive players
		let winner = players.withMax.score where .alive
		
		let maxScore = math.max players[0].score, players[1].score
		
		let firstThreePlayers = players[..3]
		
		let top3Players = players.orderBy(.score).take 3
		
Item
	const Vector2 size = {300,60}
	bool moveable = true
	Vector2 position, originalPosition
	Touch moveTouch
	Vector2 touchOffset
	Box droppedInBox
	string word
	
	tick
		if moveable and app.phase == DragItems
			// Drag items
			onTouchDownWithin position, size, by:app.currentPlayer
				// Start dragging item
				let playerWhoClicked = touch.by
				moveTouch = .
				originalPosition = position
				touchOffset = position - .position
				if droppedInBox
					droppedInBox.itemInBox = null
					droppedInBox = null
					
			onTouchMove moveTouch
				// Drag item
				position = .position + touchOffset
				
			onTouchUp moveTouch
				// Drop item
				let droppedInBox = app.boxes.find.rect.contains position
				if droppedInBox and droppedInBox.itemInBox == null
					this.droppedInBox = droppedInBox
					droppedInBox.itemInBox = this
					position = droppedInBox.rect.position
				else
					// Box is full, revert to original position
					position = originalPosition
				moveTouch = null
		
		// Draw red text in the foreground
		drawText word, position, size:40, font:OpenSans, color:{"ff0000"}
		
		// Draw blue circle with a radius of 200 with a red outline
		drawCircle position, size:400, color:{"0000ff"}, outlineColor:{"ff0000"}, outlineWidth:5
		
Box
	Rect rect
	Item itemInBox
	tick
		// Draw blue box with white outline
		drawRectangle rect.position, rect.size, color:{"0000ff"}, outlineColor:{"ffffff"}, outlineWidth:5
		
Player
	int score
	bool alive
	string name
	
	visible Color playerColor = graphics.defaultColors[index]
	visible Direction dir = Direction.diagonalDirections[index]
	visible Vector2 videoPos = dir.vector * {700,270}
	
	tick
		// Draw round video of player with cirlce outline
		const radius = 220
		drawVideo me, videoPos, size:radius*2, shape:Circle
		drawCircle videoPos, size:radius*2+50, outlineColor:playerColor, outlineWidth:12

// The LiveTime API. ONLY call functions that are in the LiveTime API
Touch
	int userId
	Vector2 referencePosition
	Vector2 referenceStartPosition
	
unit input
	global onTouchDownWithin: Vector2 position, Vector2 size, Player[] by = null, Cursor cursor = Auto, bool showTouchArea = false, bool markAsHandled = true, HorizontalAlignment align = Center, VerticalAlignment valign = Middle, void(Touch touch) do
	global onTouchMove: Touch touch, triggeredOnTouchDown = true, void(Touch touch) do)
	global onTouchMove: Player[] by = null, void(Touch touch) do)
	global onTouchUp: Touch touch, markAsHandled = true, void(Touch touch) do)
	global onTouchUp: Player[] by = null, bool markAsHandled = true, void(Touch touch) do)
		
unit math
	int randomInteger: int min, int max
	float randomFloat
	float min: float a, float b
	float max: float a, float b

List<T>
	each: inline void(T it, int i) do
	add: T item
	insert: T item, index = 0
	remove: T item
	removeAt: int index
	removeWhere: bool(T a) condition
	ensure: T item
	bool contains: T item
	T pop
	int length
	clear
	T random
	T popRandom
	T next: T currentItem
	moveToBack: T item
	moveToFront: T item
	T[] orderBy: float(T a) expression
	bool any: bool(T a) predicate
	bool none: bool(T a) predicate
	bool all: bool(T a) predicate
	TValue[] select: TValue(T it) selector
	T find: bool(T a) condition
	T[] where: bool(T a) condition
	int total: int(T it) selector
	shuffle
	min: float(T a) selector, float threshold = float.maxValue, float default = 0
	max: float(T a) selector, float threshold = float.minValue, float default = 0

// Draw graphics on the screen
unit graphics
	global void drawImage: Image image, Vector2 position = {}, frame = 0, implicit Vector2 size = {}, Angle angle = 0.0, touchMargin = Vector2(16,16), showTouchArea = false, implicit Player[] visibleFor = null, implicit Player[] touchableBy = null, hotkey = Key.None, implicit layer = 0, alpha = 1.0, Color color = White, void(Touch touch) onTouch
	global js void drawText: implicit string text, Vector2 position = {}, implicit Vector2 size = {}, Color color = null, HorizontalAlignment align = Center, VerticalAlignment valign = Middle, FontStyle style = Normal, Font font = null, Color outlineColor = null, outlineWidth = 0, implicit Player[] visibleFor = null, implicit layer = 0, alpha = 1.0
	global void drawButton: Image image = null, text = "", Vector2 position = {}, implicit Vector2 size = {}, frame = 0, Color textColor = null, textSize = 18, textOffset = Vector2(0,0), touchMargin = Vector2(16,16), showTouchArea = false, implicit Player[] visibleFor = null, implicit Player[] touchableBy = null, hotkey = Key.None, implicit layer = 0, alpha = 1.0, enabled = true, alphaWhenDisabled = .5, void(Touch touch) onTouch = null
	global js void drawRectangle: position = Vector2(), implicit size = Vector2(256,256), Color color = null, Color outlineColor = null, outlineWidth = 0, implicit Player[] visibleFor = null, implicit layer = 0, alpha = 1.0, HorizontalAlignment align = Center, VerticalAlignment valign = Middle
	global js void drawCircle: position = Vector2(), implicit Vector2 size = {256,256}, Color color = null, Color outlineColor = null, outlineWidth = 0, Angle startAngle = -.25, Angle angle = 1.0, RotationDirection direction = Clockwise, implicit Player[] visibleFor = null, implicit layer = 0, alpha = 1.0

// ACTUAL CODE: Start of actual code
